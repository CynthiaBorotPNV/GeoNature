:py:mod:`geonature.core.users.models`
=====================================

.. py:module:: geonature.core.users.models


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   geonature.core.users.models.VUserslistForallMenu
   geonature.core.users.models.CorRole
   geonature.core.users.models.TApplications
   geonature.core.users.models.UserRigth




.. py:class:: VUserslistForallMenu


   Bases: :py:obj:`geonature.utils.env.DB.Model`

   The base class of the :attr:`.SQLAlchemy.Model` declarative model class.

   To define models, subclass :attr:`db.Model <.SQLAlchemy.Model>`, not this. To
   customize ``db.Model``, subclass this and pass it as ``model_class`` to
   :class:`.SQLAlchemy`. To customize ``db.Model`` at the metaclass level, pass an
   already created declarative model class as ``model_class``.

   .. py:attribute:: __tablename__
      :value: 'v_userslist_forall_menu'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: id_role

      

   .. py:attribute:: nom_role

      

   .. py:attribute:: prenom_role

      

   .. py:attribute:: nom_complet

      

   .. py:attribute:: id_menu

      


.. py:class:: CorRole(id_group, id_role)


   Bases: :py:obj:`geonature.utils.env.DB.Model`

   The base class of the :attr:`.SQLAlchemy.Model` declarative model class.

   To define models, subclass :attr:`db.Model <.SQLAlchemy.Model>`, not this. To
   customize ``db.Model``, subclass this and pass it as ``model_class`` to
   :class:`.SQLAlchemy`. To customize ``db.Model`` at the metaclass level, pass an
   already created declarative model class as ``model_class``.

   .. py:attribute:: __tablename__
      :value: 'cor_roles'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: id_role_groupe

      

   .. py:attribute:: id_role_utilisateur

      

   .. py:attribute:: role

      


.. py:class:: TApplications


   Bases: :py:obj:`geonature.utils.env.DB.Model`

   The base class of the :attr:`.SQLAlchemy.Model` declarative model class.

   To define models, subclass :attr:`db.Model <.SQLAlchemy.Model>`, not this. To
   customize ``db.Model``, subclass this and pass it as ``model_class`` to
   :class:`.SQLAlchemy`. To customize ``db.Model`` at the metaclass level, pass an
   already created declarative model class as ``model_class``.

   .. py:attribute:: __tablename__
      :value: 't_applications'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: id_application

      

   .. py:attribute:: nom_application

      

   .. py:attribute:: desc_application

      

   .. py:attribute:: id_parent

      


.. py:class:: UserRigth(id_role=None, id_organisme=None, code_action=None, value_filter=None, module_code=None, nom_role=None, prenom_role=None)



